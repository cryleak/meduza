/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.init.Blocks
 *  net.minecraft.item.Item
 *  net.minecraft.network.play.client.CPacketCloseWindow
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock
 *  net.minecraft.tileentity.TileEntityHopper
 *  net.minecraft.util.math.BlockPos
 *  org.lwjgl.opengl.GL11
 */
package me.zeroeightsix.kami.module.modules.exploits;

import java.awt.Color;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import me.zeroeightsix.kami.event.events.PacketEvent;
import me.zeroeightsix.kami.event.events.RenderEvent;
import me.zeroeightsix.kami.module.Module;
import me.zeroeightsix.kami.setting.Setting;
import me.zeroeightsix.kami.setting.Settings;
import me.zeroeightsix.kami.util.KamiTessellator;
import me.zeroeightsix.kami.util.ReflectionHelper;
import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.network.play.client.CPacketCloseWindow;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.tileentity.TileEntityHopper;
import net.minecraft.util.math.BlockPos;
import org.lwjgl.opengl.GL11;

@Module.Info(name="IllegalItemBypass", category=Module.Category.EXPLOITS, description="Illegal Item Bypass")
public class IllegalItemBypass
extends Module {
    private Setting<Boolean> circleOwn = this.register(Settings.b("Draw Circle for own 32k Hopper", true));
    private Setting<Boolean> circleOthers = this.register(Settings.b("Draw Circle for other Hoppers", true));
    private Setting<Integer> circleMaxRange = this.register(Settings.i("Circle max Range", 64));
    private BlockPos ownHopper = null;
    @EventHandler
    public Listener<PacketEvent.Send> listener = new Listener<PacketEvent.Send>(event -> {
        BlockPos clickTarget;
        if (this.isDisabled()) {
            return;
        }
        if (event.getPacket() instanceof CPacketCloseWindow) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && IllegalItemBypass.mc.field_71439_g.func_184614_ca().func_77973_b() == Item.func_150898_a((Block)Blocks.field_150438_bZ) && IllegalItemBypass.mc.field_71441_e.func_180495_p(clickTarget = ((CPacketPlayerTryUseItemOnBlock)event.getPacket()).func_187023_a()).func_177230_c() != Blocks.field_150438_bZ) {
            this.ownHopper = clickTarget.func_177982_a(0, 1, 0);
        }
    }, new Predicate[0]);

    @Override
    public void onWorldRender(RenderEvent event) {
        if (this.circleOwn.getValue().booleanValue() && this.ownHopper != null && IllegalItemBypass.mc.field_71439_g.func_70011_f((double)this.ownHopper.field_177962_a, (double)this.ownHopper.field_177960_b, (double)this.ownHopper.field_177961_c) <= (double)this.circleMaxRange.getValue().intValue()) {
            this.drawRange(this.ownHopper, (float)Color.GREEN.getRed() / 255.0f, (float)Color.GREEN.getGreen() / 255.0f, (float)Color.BLUE.getBlue() / 255.0f);
        }
        if (this.circleOthers.getValue().booleanValue()) {
            for (Object tileEntity : IllegalItemBypass.mc.field_71441_e.field_147482_g) {
                if (!(tileEntity instanceof TileEntityHopper)) continue;
                BlockPos targetHopper = ((TileEntityHopper)tileEntity).func_174877_v();
                if (IllegalItemBypass.mc.field_71439_g.func_70011_f((double)targetHopper.field_177962_a, (double)targetHopper.field_177960_b, (double)targetHopper.field_177961_c) > (double)this.circleMaxRange.getValue().intValue() || this.ownHopper != null && ((TileEntityHopper)tileEntity).func_174877_v().equals((Object)this.ownHopper)) continue;
                this.drawRange(targetHopper, (float)Color.RED.getRed() / 255.0f, (float)Color.ORANGE.getGreen() / 255.0f, (float)Color.ORANGE.getBlue() / 255.0f);
            }
        }
    }

    private void drawRange(BlockPos blockPos, float red, float green, float blue) {
        KamiTessellator.prepare(7);
        double x = (double)blockPos.func_177958_n() + 0.5 - ReflectionHelper.getRenderPosX();
        double y = (double)blockPos.func_177956_o() - ReflectionHelper.getRenderPosY();
        double z = (double)blockPos.func_177952_p() + 0.5 - ReflectionHelper.getRenderPosZ();
        GL11.glPushMatrix();
        GL11.glBlendFunc((int)770, (int)771);
        GL11.glEnable((int)3042);
        GL11.glLineWidth((float)2.0f);
        GL11.glDisable((int)3553);
        GL11.glDisable((int)2929);
        GL11.glDepthMask((boolean)false);
        GL11.glColor4d((double)red, (double)green, (double)blue, (double)0.2);
        GL11.glBegin((int)9);
        for (int i = 0; i <= 360; ++i) {
            GL11.glVertex3d((double)(x + Math.sin((double)i * 3.1415 / 180.0) * 7.0), (double)y, (double)(z + Math.cos((double)i * 3.1415 / 180.0) * 7.0));
        }
        GL11.glEnd();
        GL11.glLineWidth((float)2.0f);
        GL11.glEnable((int)3553);
        GL11.glEnable((int)2929);
        GL11.glDepthMask((boolean)true);
        GL11.glDisable((int)3042);
        GL11.glPopMatrix();
        GL11.glColor4f((float)1.0f, (float)1.0f, (float)1.0f, (float)1.0f);
        KamiTessellator.release();
    }
}

